// nonWF selection-driven bottleneck after Gravel model with two chromosomes and several loci

initialize() {
	//setSeed(1694628549537);
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);
	initializeTreeSeq();
	defineConstant("simID", getSeed());
	if (exists("slimgui")) {
		defineConstant("O", "nonWF_select_"+simID+".trees");
		//defineConstant("gravel",2247793190995);
		defineConstant("I", 1);
		//defineConstant("selected",13811692);
		defineConstant("selFreq",0.1);		
		defineConstant("directory","/home/lnd775/data/");
		defineConstant("deme", 1);
	}
	
	setwd(directory);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	initializeGenomicElementType("g1", c(m1,m2), c(1.0,1.0));
	initializeGenomicElement(g1, 0, 68937974);
	initializeMutationRate(0);
	
	// Read combined HapMap for chr21 and chr22
	// Use uniform recombination rates
	rates = c(1e-8, 0.5, 1e-8);
	ends = c(33759514, 33759515, 68937974);
	initializeRecombinationRate(rates, ends);
	}


// WF-like reproduction - systematically returns to K and prints the ID of the designated parents
reproduction() {
	K = sim.getValue("K");
	for (i in seqLen(K))
	{
		firstParent = p2.sampleIndividuals(1);
		secondParent = p2.sampleIndividuals(1, exclude=firstParent);
		p2.addCrossed(firstParent, secondParent);
		
		// Parental Genotypes		
		//writeFile("nwf_all_patGeno_" + I + ".csv", paste(c(sim.generation,firstParent.pedigreeID,firstParent.countOfMutationsOfType(m1)), "\t"), append=T);
		//writeFile("nwf_all_patGeno_" + I + ".csv", paste(c(sim.generation,secondParent.pedigreeID,secondParent.countOfMutationsOfType(m1)),"\t"), append=T);
	}
	self.active = 0;
}

58773 early() {
	// Read from Gravel WF trees
	sim.readFromPopulationFile("/home/lnd775/data/plague/demographies/plagueGravel_"+deme+".trees");
	sim.setValue("K", p2.individualCount);
	N = c(466667,466667,350000,400000,436000,470000,554600,654428,713327,900000,1000000,1100000);
	sim.setValue("N", N);
	N = sim.getValue("N");
}

58773:58796 late() {
	t = sim.generation - 57080;
	p2_size = asInteger(round(1032 * exp(0.0038 * t)));
	//p2.setSubpopulationSize(asInteger(p2_size));
	sim.setValue("K", p2_size);
	catn("Generation: " + sim.generation + " PopSize: " + p2.individualCount);
	//if (p2_size >= 70000)
	if (sim.generation==58796)
	{
		mut = sim.mutationsOfType(m1);
		if (size(mut) > 1)
		{
			freqs=sim.mutationFrequencies(p2);
			if (any(freqs >= 0.2 & freqs < 0.205) & size(freqs[freqs >= 0.4 & freqs < 0.405]) >= 1) {
			//if (size(freqs[freqs >= 0.4 & freqs < 0.4005]) >= 2) {

				catn("0.2 AF Total: " + size(freqs[freqs >= 0.2 & freqs < 0.2005]));
				catn("0.4 AF Total: " + size(freqs[freqs >= 0.4 & freqs < 0.4005]));
				catn(getSeed() + ": ESTABLISHED - KEEP MUTATIONS");
				//catn("Frequency: " + sim.mutationFrequencies(p2) + " at " + sim.mutationsOfType(m1).position);
				//sim.deregisterScriptBlock(self);
			
			}
			else {
				catn("All is lost.\n");
				//print(getSeed() +": RESTARTING\nFrequency: " + sim.mutationFrequencies(p2) + " at " + sim.mutationsOfType(m1).position);
				print(getSeed() +": RESTARTING\n");

				// go back to generation 58773
				sim.readFromPopulationFile("/home/lnd775/data/plague/demographies/plagueGravel_"+deme+".trees");
				
				// start a newly seeded run
				setSeed(rdunif(1, 0, asInteger(2^62) - 1));
				
				}
			
			}
		
		
		else
		{
			//print(getSeed() +": UNFIT - RESTARTING\nFrequency: " + sim.mutationFrequencies(p2) + " at " + sim.mutationsOfType(m1).position);
			print(getSeed() +": RESTARTING\n");

			// go back to generation 58773
			sim.readFromPopulationFile("/home/lnd775/data/plague/demographies/plagueGravel_"+deme+".trees");
			
			// start a newly seeded run
			setSeed(rdunif(1, 0, asInteger(2^62) - 1));
			
			
		}
	}
}


58796 late() {
	mut = sim.mutations;
	catn(mut);
	}

// Non-overlapping generations
early()
{
	// Keep only juveniles
	inds = sim.subpopulations.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
	off = inds[inds.age < 1];
	N = sim.getValue("N");
	// Write out information on parents mated and resulting offspring
	//writeFile("nwf_mated_parents_" + I + ".csv", paste(c(sim.generation,off.pedigreeParentIDs),"\t"), append=T);
	//writeFile("nwf_mated_offspring_" + I + ".csv", paste(c(sim.generation,off.pedigreeID),"\t"), append=T);
}

// ADDITIVE MODEL: Reduce fitness of individuals with less copies of allele
58797:58808 early() {
	selected = sim.getValue("selected");
	//print("Gen: " + sim.generation + " Early: " + selected);
	inds = sim.subpopulations.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
	inds = inds[inds.age < 1];
	mut = sim.mutations;
	target=mut[mut.position==selected];
	wt = size(inds[inds.countOfMutationsOfType(m2) == 0]);
	het = size(inds[inds.countOfMutationsOfType(m2) == 1]);
	hom = size(inds[inds.countOfMutationsOfType(m2) == 2]);
	t = sim.generation - 58797;
	N = sim.getValue("N");
	prop = N[t];
	sim.setValue("P", prop);
	if (sim.generation == 58797 | sim.generation == 58799) {		
	fithet = (prop-(fithom*(hom-wt)))/((2*wt)+het);
	fitwt = (2*(fithet))-fithom;
	inds[inds.countOfMutationsOfType(m2) == 0].fitnessScaling = fitwt;
	inds[inds.countOfMutationsOfType(m2) == 1].fitnessScaling = fithet;
	inds[inds.countOfMutationsOfType(m2) == 2].fitnessScaling = fithom;
	} else {
	inds[inds.countOfMutationsOfType(m2) == 0].fitnessScaling = 1;
	inds[inds.countOfMutationsOfType(m2) == 1].fitnessScaling = 1;
	inds[inds.countOfMutationsOfType(m2) == 2].fitnessScaling = 1;}
	
}

// Early individuals saved
58797 early() {
	sim.treeSeqRememberIndividuals(p2.individuals);
}

58799 early() {
	sim.treeSeqRememberIndividuals(p2.individuals);
}

58797:58808 late() {
	p2_size = sim.getValue("P");
	//sim.setValue("K",p2_size);
	t = (sim.generation - 58797)+1;
	N = sim.getValue("N");
	if (sim.generation==58808) {
	    t = (sim.generation - 58797);
	}
	else {
	    t = (sim.generation - 58797)+1;
	        }
	prop = N[t];
	if (prop > p2_size) {
		sim.setValue("K", prop);
	}
	else {
		//sim.setValue("K",prop);
		sim.setValue("K",p2.individualCount);
	}
}

// Output per generation - prints out to file the final parents of each remaining offspring
58796:58818 late() {
	mut = sim.mutations;
	if (sim.generation==58796) {
	freqs=sim.mutationFrequencies(p2);
	selected=sample(mut[freqs >= selFreq & freqs < selFreq+0.005],1).position;
	//print("Gen: " + sim.generation + " Late: " + selected);
	sim.setValue("selected", selected);
	writeFile("selected.txt", paste(selected), append=F);	
	}
	else {
	selected=sim.getValue("selected");
	}
	target=mut[mut.position==selected];
	target.setMutationType(m2);
	sim.treeSeqRememberIndividuals(p2.individuals);
	freq = sim.mutationFrequencies(p2, target);
	inds = sim.subpopulations.individuals;
	off = inds[inds.age < 1];
	off.tag=off.pedigreeID;
	patsize = size(unique(off.pedigreeParentIDs));
	
	// PopLitter for next generation
	K = sim.getValue("K");
	
	//Count of genotypes
	wt = size(inds[inds.countOfMutationsOfType(m2) == 0]);
	het = size(inds[inds.countOfMutationsOfType(m2) == 1]);
	hom = size(inds[inds.countOfMutationsOfType(m2) == 2]);
	
	// Output counts on population with mutation
	catn(sim.generation + "\t" + p2.individualCount + "\t" + sim.mutationFrequencies(p2, target) + "\t" + wt + "\t" + het + "\t" + hom +  "\t" + mean(p2.cachedFitness(inds[inds.countOfMutationsOfType(m2) == 0].index)) + "\t" + mean(p2.cachedFitness(inds[inds.countOfMutationsOfType(m2) == 1].index)) + "\t" + mean(p2.cachedFitness(inds[inds.countOfMutationsOfType(m2) == 2].index)) + "\t" + patsize);
	
	// Write out information on parents and the dead
	writeFile("nwf_survivor_parents_" + I + ".csv", paste(c(sim.generation,off.pedigreeParentIDs),"\t"), append=T);
	writeFile("nwf_putparents_" + I + ".csv", paste(c(sim.generation+1,off.pedigreeID),"\t"), append=T);
	writeFile("nwf_putparents_" + I + ".csv", paste(c(sim.generation+1+"g",off.countOfMutationsOfType(m2)),"\t"), append=T);
	writeFile("nwf_otherFreqs_" + I + ".csv", paste(c("Generation: "+sim.generation, sim.mutationFrequencies(p2,mut[mut!=target]) + " at "+sim.mutationsOfType(m1).position),"\n"), append=T);
}

// Tree output
58818 late() {
	sim.treeSeqOutput("add_grad_" + I + ".trees");

}
